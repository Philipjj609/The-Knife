<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/user_manual.tex">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user_manual.tex" />
              <option name="updatedContent" value="% Manuale utente generato per il progetto &quot;The Knife&quot;&#10;\documentclass[a4paper,12pt]{report}&#10;&#10;% Pacchetti richiesti&#10;\usepackage[utf8]{inputenc}&#10;\usepackage[T1]{fontenc}&#10;\usepackage[italian]{babel}&#10;\usepackage{hyperref}&#10;\usepackage{graphicx}&#10;\usepackage{listings}&#10;\usepackage{amsmath}&#10;\usepackage{geometry}&#10;\usepackage{booktabs}&#10;\usepackage{fancyhdr}&#10;\usepackage{titlesec}&#10;\usepackage{xcolor}&#10;\geometry{a4paper, margin=2cm}&#10;&#10;% Stile per i blocchi di codice&#10;\definecolor{codebg}{rgb}{0.95,0.95,0.95}&#10;\lstset{language=Java,&#10;  basicstyle=\ttfamily\small,&#10;  numbers=left,&#10;  numberstyle=\tiny,&#10;  stepnumber=1,&#10;  numbersep=5pt,&#10;  backgroundcolor=\color{codebg},&#10;  frame=single,&#10;  showstringspaces=false,&#10;  captionpos=b&#10;}&#10;&#10;% Header / Footer&#10;\pagestyle{fancy}&#10;\fancyhead{}&#10;\fancyhead[L]{\nouppercase{\rightmark}}&#10;\fancyfoot{}&#10;\fancyfoot[C]{\thepage}&#10;\setlength{\headheight}{15pt}&#10;&#10;% Titolo&#10;\title{The Knife - Manuale Utente}&#10;\author{User Documentation Team}&#10;\date{1 settembre 2025}&#10;&#10;\begin{document}&#10;&#10;\maketitle&#10;&#10;\begin{abstract}&#10;Questo manuale utente descrive come installare, configurare e utilizzare l'applicazione desktop &quot;The Knife&quot;, sviluppata in Java/JavaFX per la consultazione e la gestione di un dataset di ristoranti (dataset Michelin). Il documento è pensato per utenti finali, amministratori e operatori che devono installare l'app, eseguire operazioni quotidiane e comprendere le funzionalità principali.&#10;\end{abstract}&#10;&#10;\clearpage&#10;\tableofcontents&#10;\clearpage&#10;&#10;\chapter{Introduzione}&#10;\section{Panoramica del progetto}&#10;The Knife è un'applicazione desktop che permette di esplorare ristoranti, visualizzare informazioni dettagliate (indirizzo, cucina, fascia prezzo, premi), leggere e lasciare recensioni, e gestire gli account utente con ruoli distinti (Cliente, Ristoratore). L'interfaccia è basata su JavaFX e presenta varie view per ricerca, dettaglio ristorante, gestione profilo e dashboard per ristoratori.&#10;&#10;Obiettivi per l'utente:&#10;\begin{itemize}&#10;  \item Consultare un elenco di ristoranti e filtrarli per criteri (città, fascia prezzo, stelle).&#10;  \item Visualizzare la scheda dettaglio di un ristorante con informazioni e recensioni.&#10;  \item Registrarsi, effettuare il login e gestire il proprio profilo.&#10;  \item Pubblicare recensioni come cliente e rispondere alle recensioni come ristoratore.&#10;\end{itemize}&#10;&#10;Pubblico target: utenti finali non tecnici, gestori di ristoranti, e amministratori del sistema.&#10;&#10;\section{Architettura a alto livello}&#10;L'applicazione segue un'architettura client-side desktop: una GUI JavaFX (FXML + controller) che legge e scrive dati in file CSV locali via utility interne. Il punto d'ingresso è la classe \texttt{theknife.Main} che carica risorse e dataset all'avvio.&#10;&#10;Componenti principali:&#10;\begin{itemize}&#10;  \item Interfaccia utente: file FXML in \texttt{src/main/resources/views} e controller in \texttt{theknife.controllers}.&#10;  \item Dati: file CSV in \texttt{src/main/resources/data} (ristoranti, utenti, recensioni, etc.).&#10;  \item Modello: classi in \texttt{theknife.models} (\texttt{Ristorante}, \texttt{Utente}, \texttt{Recensione}).&#10;  \item Utility: \texttt{theknife.utils.FileManager} (caricamento/salvataggio dei CSV).&#10;\end{itemize}&#10;&#10;\begin{figure}[h!]&#10;\centering&#10;\includegraphics[width=0.45\textwidth]{src/main/resources/images/icon.png}&#10;\caption{Diagramma architetturale (segnaposto)}&#10;\label{fig:arch}&#10;\end{figure}&#10;&#10;\section{Requisiti di sistema}&#10;Requisiti minimi per l'esecuzione:&#10;\begin{itemize}&#10;  \item Sistema operativo: Windows 10/11 (testato), macOS o Linux (compatibile).&#10;  \item JDK 17 o superiore installato e variabile \texttt{JAVA_HOME} impostata.&#10;  \item JavaFX runtime compatibile se il JDK non include JavaFX.&#10;  \item 2 GB di spazio libero e almeno 4 GB di RAM (8 GB raccomandati).&#10;  \item Schermo consigliato: 1366x768 o superiore.&#10;\end{itemize}&#10;&#10;\chapter{Installazione e configurazione}&#10;\section{Prerequisiti}&#10;Prima di installare o eseguire l'app assicurarsi di avere:&#10;\begin{itemize}&#10;  \item JDK 17+ installato e funzionante.&#10;  \item Maven (o usare gli script \texttt{mvnw} forniti).&#10;  \item Git (opzionale per clonare il repository).&#10;\end{itemize}&#10;&#10;\section{Installazione passo-passo}&#10;Istruzioni per utenti su Windows (procedura tipica):&#10;\begin{enumerate}&#10;  \item Clonare o scaricare il repository.&#10;  \item Aprire una finestra terminale nella cartella del progetto.&#10;  \item Compilare e avviare l'app usando il wrapper Maven incluso.&#10;\end{enumerate}&#10;&#10;Esempio di comandi (Windows PowerShell o CMD):&#10;\begin{lstlisting}[language=bash]&#10;git clone &lt;URL-del-repository&gt;&#10;cd theknife&#10;mvnw.cmd clean package&#10;mvnw.cmd javafx:run&#10;\end{lstlisting}&#10;&#10;Output atteso: la GUI JavaFX si avvia e viene mostrata la schermata principale &quot;Home&quot;. Se manca JavaFX nel runtime, il comando segnala errori relativi alle classi JavaFX mancanti.&#10;&#10;\section{Configurazione dell'applicazione}&#10;File di configurazione e dataset principali:&#10;\begin{itemize}&#10;  \item \texttt{src/main/resources/data/michelin_my_maps.csv}: dataset principale dei ristoranti.&#10;  \item \texttt{src/main/resources/data/utenti.csv}: utenti registrati.&#10;  \item \texttt{src/main/resources/data/recensioni.csv}: archivio delle recensioni.&#10;  \item \texttt{src/main/resources/styles/main.css}: aspetto grafico.&#10;  \item \texttt{src/main/resources/views}: file FXML delle schermate.&#10;\end{itemize}&#10;&#10;Modificare percorsi: per utilizzare dati esterni, modificare il valore passato a \texttt{FileManager.caricaRistorantiDaCSV(...)} nella classe \texttt{Main} o creare un file di configurazione esterno che l'app legga all'avvio.&#10;&#10;\chapter{Uso dell'applicazione}&#10;Questa sezione descrive le funzionalità principali e come gli utenti le utilizzano.&#10;&#10;\section{Schermata Home}&#10;La Home mostra opzioni di navigazione: esplora ristoranti, login/registrazione, ricerca rapida. Da qui è possibile accedere alle altre view.&#10;&#10;\section{Ricerca ed esplorazione ristoranti}&#10;Nella view &quot;Esplora Ristoranti&quot; è possibile:&#10;\begin{itemize}&#10;  \item Cercare per nome o città.&#10;  \item Filtrare per fascia di prezzo, tipo di cucina, stelle Michelin.&#10;  \item Ordinare per valutazione media o distanza (se supportato).&#10;\end{itemize}&#10;&#10;Esempio: digitare &quot;Milano&quot; nel campo città e premere Cerca.&#10;&#10;\section{Scheda dettaglio ristorante}&#10;La scheda mostra:&#10;\begin{itemize}&#10;  \item Nome, indirizzo, tipo di cucina, fascia prezzo.&#10;  \item Contatti (telefono, sito web) e coordinate geografiche.&#10;  \item Premi (stelle, Green Star) e descrizione.&#10;  \item Lista di recensioni con titolo, stelle, autore e data.&#10;\end{itemize}&#10;&#10;Come lasciare una recensione:&#10;\begin{enumerate}&#10;  \item Effettuare il login come cliente.&#10;  \item Aprire la scheda del ristorante desiderato.&#10;  \item Cliccare su &quot;Aggiungi recensione&quot; e compilare titolo, valutazione e commento.&#10;  \item Confermare per salvare la recensione.&#10;\end{enumerate}&#10;&#10;\section{Gestione account}&#10;Registrazione e login sono accessibili dalle schermate dedicate.&#10;&#10;Registrazione:&#10;\begin{lstlisting}[language=bash]&#10;# Esempio di valori immessi nell'interfaccia&#10;Nome: Mario&#10;Cognome: Rossi&#10;Username: mrossi&#10;Password: ********&#10;Ruolo: Cliente&#10;\end{lstlisting}&#10;&#10;Login:&#10;\begin{itemize}&#10;  \item Inserire username e password.&#10;  \item Se le credenziali sono corrette si verrà reindirizzati alla dashboard appropriata (Cliente o Ristoratore).&#10;\end{itemize}&#10;&#10;\section{Dashboard Ristoratore}&#10;I ristoratori loggati possono:&#10;\begin{itemize}&#10;  \item Visualizzare le recensioni ricevute e rispondere.&#10;  \item Gestire le informazioni del proprio ristorante (indirizzo, orari, servizi).&#10;\end{itemize}&#10;&#10;\chapter{Struttura del codice e design (per utenti avanzati)}&#10;Questa sezione introduce la struttura del codice per utenti che vogliono comprendere o estendere l'app.&#10;&#10;\section{Layout della directory}&#10;Albero semplificato del progetto:&#10;\begin{lstlisting}&#10;theknife/&#10;|-- pom.xml&#10;|-- src/&#10;|   |-- main/&#10;|       |-- java/&#10;|       |   |-- theknife/&#10;|       |       |-- Main.java&#10;|       |       |-- esegui.java&#10;|       |       |-- controllers/  (gestione UI)&#10;|       |       |-- models/       (Utente, Ristorante, Recensione)&#10;|       |       |-- services/     (logiche di business)&#10;|       |       |-- utils/        (FileManager)&#10;|       |-- resources/&#10;|           |-- data/            (CSV)&#10;|           |-- views/           (FXML)&#10;|           |-- images/          (icon.png)&#10;|           |-- styles/          (main.css)&#10;\end{lstlisting}&#10;&#10;\section{Design patterns (panoramica)}&#10;L'app sfrutta pattern tipici di applicazioni GUI:&#10;\begin{itemize}&#10;  \item MVC: separazione tra Modello (models), Vista (FXML) e Controller (controllers).&#10;  \item Repository/DAO (raccomandato): FileManager agisce come layer di accesso ai dati.&#10;  \item Factory (consigliato): metodi statici per creare oggetti \texttt{Ristorante} da righe CSV.&#10;\end{itemize}&#10;&#10;\chapter{Riferimento rapido delle classi (sintesi)}&#10;Sezione descrittiva delle classi principali (sintesi ad uso dell'utente avanzato o dell'amministratore).&#10;&#10;\section{Classe \texttt{Ristorante}}&#10;Scopo: rappresentare un ristorante.&#10;&#10;Campi principali: nome, address, location, price, cuisine, longitude, latitude, award, greenStar, facilitiesAndServices.&#10;&#10;Metodi principali:&#10;\begin{itemize}&#10;  \item \lstinline[language=Java]{public int getStars()} -- ritorna numero di stelle interpretando \texttt{award}.&#10;  \item \lstinline[language=Java]{public boolean hasGreenStar()} -- true se il campo greenStar è valorizzato.&#10;\end{itemize}&#10;&#10;Esempio d'uso:&#10;\begin{lstlisting}[language=Java]&#10;Ristorante r = new Ristorante(&quot;Trattoria&quot;, &quot;Via A&quot;, &quot;Milano&quot;, &quot;€&quot;, &quot;Italiana&quot;,&#10;    9.19, 45.46, &quot;+3902...&quot;, &quot;&quot;, &quot;&quot;, &quot;1 Stella&quot;, &quot;&quot;, &quot;Descrizione&quot;);&#10;int stelle = r.getStars();&#10;\end{lstlisting}&#10;&#10;\section{Classe \texttt{Utente}}&#10;Scopo: rappresentare un utente dell'app.&#10;&#10;Campi: nome, cognome, username, passwordHash, dataNascita, domicilio, ruolo.&#10;&#10;Metodi utili: getter/setter standard e \lstinline[language=Java]{public String getUsername()}.&#10;&#10;\section{Classe \texttt{Recensione}}&#10;Scopo: rappresentare una recensione con valutazione, titolo, commento e data.&#10;&#10;Metodi utili:&#10;\begin{itemize}&#10;  \item \lstinline[language=Java]{public String getStelle()} -- restituisce rappresentazione a stelle (es. ★★★☆☆).&#10;  \item \lstinline[language=Java]{public String getDataRecensioneFormatted()} -- data formattata per la visualizzazione.&#10;\end{itemize}&#10;&#10;\section{Classe \texttt{Main}}&#10;Scopo: avviare l'applicazione JavaFX e caricare il dataset. Il metodo chiave è:&#10;\begin{lstlisting}[language=Java]&#10;public void start(Stage primaryStage) throws Exception&#10;\end{lstlisting}&#10;&#10;\chapter{Test e qualità}&#10;\section{Test (per team tecnici)}&#10;L'app non include test unitari nella distribuzione corrente; per la qualità si consiglia:&#10;\begin{itemize}&#10;  \item JUnit 5 per test unitari.&#10;  \item Mockito per mock di dipendenze.&#10;  \item Esecuzione dei test tramite Maven (\texttt{mvn test}).&#10;\end{itemize}&#10;&#10;Esempio di test rapido (JUnit 5):&#10;\begin{lstlisting}[language=Java]&#10;@Test&#10;public void testGetStars() {&#10;    Ristorante r = new Ristorante(...);&#10;    assertEquals(1, r.getStars());&#10;}&#10;\end{lstlisting}&#10;&#10;\chapter{Distribuzione per utenti}&#10;\section{Creazione dell'artefatto}&#10;Per distribuire l'applicazione agli utenti finali si possono generare:&#10;\begin{itemize}&#10;  \item Un jar eseguibile (con runtime JavaFX incluso o richiedendo JavaFX esterno).&#10;  \item Un pacchetto nativo tramite \texttt{jpackage} (raccomandato per facilità d'installazione).&#10;\end{itemize}&#10;&#10;Comando di build (Maven wrapper):&#10;\begin{lstlisting}&#10;#mvnw.cmd clean package&#10;\end{lstlisting}&#10;&#10;\section{Installazione su macchina utente}&#10;Procedure consigliate:&#10;\begin{enumerate}&#10;  \item Fornire un installer (jpackage) che includa il runtime Java.&#10;  \item Fornire istruzioni all'utente per lanciare l'app (doppio click sul file eseguibile o via riga di comando \texttt{java -jar}).&#10;\end{enumerate}&#10;&#10;\chapter{Domande frequenti (FAQ)}&#10;\begin{itemize}&#10;  \item L'app non si avvia: controllare che il JDK e JavaFX siano installati e compatibili.&#10;  \item Dove sono salvate le recensioni? Nel file \texttt{src/main/resources/data/recensioni.csv} (per ambiente di sviluppo). In produzione si consiglia un DB.&#10;  \item Come cambio il dataset? Sostituire il file CSV e riavviare l'app.&#10;\end{itemize}&#10;&#10;\chapter{Appendici}&#10;\section{Glossario}&#10;\begin{itemize}&#10;  \item GUI: Graphical User Interface.&#10;  \item CSV: Comma Separated Values.&#10;  \item FXML: formato XML per definire le interfacce JavaFX.&#10;  \item JDK: Java Development Kit.&#10;\end{itemize}&#10;&#10;\clearpage&#10;\bibliographystyle{plain}&#10;\bibliography{references}&#10;&#10;\end{document}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>